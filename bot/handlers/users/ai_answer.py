import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from bot.keyboards.inline.ai_keyboard import ai_kb
from bot.keyboards.inline.go_to_menu_keyboard import go_menu_kb
from bot.states.ai_question import AiQuestion
from bot.utils.openai.openai_api import ask_chatgpt
from loader import dp


async def animate_thinking(chat_id, message_id):
    dots = ["", ".", "..", "..."]
    for i in range(12):
        text = f"‚è≥ <b>–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º{dots[i % len(dots)]}</b>"
        await dp.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            parse_mode="HTML"
        )
        await asyncio.sleep(0.5)


@dp.callback_query_handler(Text(equals='ai_answer'))
async def ai_answer_handler(call: types.CallbackQuery, state: FSMContext):
    await call.answer(' ')
    msg = await call.message.edit_text('''ü§ñ <b>–ù–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?</b>
–°–ø—Ä–æ—Å–∏ –ò–ò!

üí¨ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∞ —è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É''', reply_markup=go_menu_kb())
    await AiQuestion.question.set()

    await state.update_data(
        {
            'message_id': msg.message_id
        }
    )


@dp.message_handler(state=AiQuestion.question)
async def get_question_from_user_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question = message.text
    await message.delete()

    await animate_thinking(
        chat_id=message.from_user.id,
        message_id=data['message_id']
    )

    answer = await ask_chatgpt(question)

    await dp.bot.edit_message_text(
        chat_id=message.from_user.id,
        message_id=data['message_id'],
        text=f'''‚úÖ <b>–û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!</b>

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç: {answer}

–•–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å?
üëá–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ''',
        reply_markup=ai_kb()
    )
    await state.reset_state(True)
