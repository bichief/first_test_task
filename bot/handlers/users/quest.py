from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.keyboards.inline.quest_keyboard import quest_kb, reload_quest_kb
from bot.states.totem_quiz import TotemQuiz
from loader import dp

QUESTIONS = [
    {
        "text": "üêæ –ö–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        "options": {
            "–ù–∞ –ø—Ä–∏—Ä–æ–¥–µ üèï": "wolf",
            "–° –¥—Ä—É–∑—å—è–º–∏ üçª": "dog",
            "–í –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ üìö": "owl",
        },
    },
    {
        "text": "üåô –ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –ø–æ –¥—É—Ö—É?",
        "options": {
            "–ù–æ—á—å –∏ —Ç–∞–π–Ω–∞ üåå": "owl",
            "–°–≤–æ–±–æ–¥–∞ –∏ –æ—Ö–æ—Ç–∞ üê∫": "wolf",
            "–í–µ—Ä–Ω–æ—Å—Ç—å –∏ —Ç–µ–ø–ª–æ üê∂": "dog",
        },
    },
    {
        "text": "üî• –ö–∞–∫ —Ç—ã —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?",
        "options": {
            "–°–ø–æ–∫–æ–π–Ω–æ –∏ –º—É–¥—Ä–æ ü¶â": "owl",
            "–ë–µ—Ä—É –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å üê∫": "wolf",
            "–ù–∞–¥–µ—é—Å—å –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É üíõ": "dog",
        },
    },
]

RESULTS = {
    "wolf": "üê∫ <b>–¢–≤–æ–π —Ç–æ—Ç–µ–º ‚Äî –í–æ–ª–∫!</b>\n–°–∏–º–≤–æ–ª —Å–∏–ª—ã, —Å–≤–æ–±–æ–¥—ã –∏ –≤–µ—Ä–Ω–æ—Å—Ç–∏ —Å—Ç–∞–µ.",
    "dog": "üê∂ <b>–¢–≤–æ–π —Ç–æ—Ç–µ–º ‚Äî –°–æ–±–∞–∫–∞!</b>\n–¢—ã –¥–æ–±—Ä, –ø—Ä–µ–¥–∞–Ω –∏ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º —Å –±–ª–∏–∑–∫–∏–º–∏.",
    "owl": "ü¶â <b>–¢–≤–æ–π —Ç–æ—Ç–µ–º ‚Äî –°–æ–≤–∞!</b>\n–¢—ã –º—É–¥—Ä, –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–Ω –∏ –ª—é–±–∏—à—å —É–µ–¥–∏–Ω–µ–Ω–∏–µ.",
}


async def send_question(message: types.Message, index: int):
    q = QUESTIONS[index]
    markup = InlineKeyboardMarkup()
    for text, value in q["options"].items():
        markup.add(InlineKeyboardButton(text, callback_data=f"answer_{value}_{index}"))
    await message.edit_text(q["text"], reply_markup=markup)


@dp.callback_query_handler(Text(equals='quest'), state='*')
async def quest_handler(call: types.CallbackQuery, state: FSMContext):
    await call.answer(' ')
    await state.reset_state(True)

    await call.message.edit_text('''üî• <b>–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –º–∏–Ω–∏-–∫–≤–µ—Å—Ç–∞!</b>

–û—Ç–≤–µ—Ç—å –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ —É–∑–Ω–∞–π ‚Äî –∫–∞–∫–æ–µ —Ç–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!

üëá–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É''', reply_markup=quest_kb())


@dp.callback_query_handler(Text(equals='start_quest'), state='*')
async def start_quest_handler(call: types.CallbackQuery, state: FSMContext):
    await call.answer(' ')
    await state.update_data(answers=[])
    await send_question(call.message, 0)
    await TotemQuiz.first_question.set()


@dp.callback_query_handler(Text(startswith="ans_"), state=TotemQuiz.all_states)
async def handle_answer(call: types.CallbackQuery, state: FSMContext):
    _, animal, index = call.data.split("_")
    index = int(index)

    data = await state.get_data()
    answers = data.get("answers", [])
    answers.append(animal)
    await state.update_data(answers=answers)

    await call.answer("‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç")

    if index < len(QUESTIONS) - 1:
        await send_question(call.message, index + 1)
        await TotemQuiz.next()
    else:
        result = max(set(answers), key=answers.count)
        await state.finish()
        await call.message.edit_text(RESULTS[result], reply_markup=reload_quest_kb())
